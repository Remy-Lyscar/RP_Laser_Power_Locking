#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jun 28 10:09:05 2024

@author: ipiq
"""


"""
Power-locking of the blue laser 422 nm
Can be included in a sequence (TTL)

"""


import time 
from pyrpl.async_utils import sleep
import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd 
import os 
from pyrpl import Pyrpl
import pickle 



# Location of the file
current_dir = os.path.dirname(os.path.abspath(__file__))

# If needed, this is the location of the PyRPL library 
# /home/ipiq/anaconda3/envs/pyrpl-env(3)/lib/python3.6/site-packages/pyrpl/


##### Type of power-locking #####

# Do we have to acquire data?
ACQ = True
# Do we want the lock to be included in a sequence, and to react to a trigger ? 
SEQ = False



##### Calibration of the laser #####

# Powermeter: FieldMaster 





##### RedPitaya and PyRPL #####

# Opening of a Pyrpl session to interact with RedPitaya
HOSTNAME = "192.168.1.208"
# The config file, here 'blue422', is specific to each laser. The change on one config file 
# does not affect the other lasers 

# If environment = pyrpl_env, put monitor_server_name at monitor_server
# If envrironment = pyrpl-env3, put monitor_server_name at pyrpl_server
# Do it automatically? Using environment variables ? 

monitor_server_name = "monitor_server"
p = Pyrpl('blue422', hostname = HOSTNAME, reloadserver = True)


# # Access the RedPitaya object in charge of communicating with the board
r = p.rp


# Reset modules 

# PID Module
pid = r.pid0
pid1 = r.pid1
pid2 = r.pid2
pid.output_direct = 'off'
pid1.output_direct = 'off'
pid2.output_direct = 'off'

# ASG module
asg0 = r.asg0
asg1 = r.asg1
asg0.output_direct = 'off'
asg1.output_direct = 'off'



# Setup the scope 
s = r.scope 
s.input1 = 'in1'
s.input2 = 'out1'
s.trigger_source = 'immediately' 



# Just setup the parameters of the PID, so that the lock is activated immediately 
pid.input = 'in1'
pid.output_direct = 'out1'
pid.setpoint = 0.07
pid.p = -100
pid.i = -0.01
pid.d = 0
pid.ival = 0  # Usually the first thing to do is to adjust this parameter with the GUI 
pid.inputfilter = [0, 0, 0, 0]
pid.max_voltage = 1
pid.min_voltage = -1    




if ACQ: 
    
    times, signal  = [], []
    duration = 3600 # seconds
    sampling_rate = 2 # Hz
    
    # Name of the file containing the dataframe of the acquired data 
    acq_file_name  =  'locked_laser_jeu_4_juillet_without_average.pkl'
    
    t0 = time.time()
    
    while time.time() - t0 < duration: 
        sleep(1/sampling_rate)
        times.append(time.time()-t0)
        signal.append(s.voltage_in1)
        
        
    fig = plt.figure()
    plt.plot(times, signal, label = 'blue laser: 422 nm')
    plt.xlabel('times (seconds)')
    plt.ylabel('Photodiode voltage (V)')
    plt.legend()
    plt.plot()
    
    
    df = pd.DataFrame({
                        'times': times, 
                        'signal': signal} )
    
    
    
    
    pickle.dump(df, open(os.path.join(current_dir, acq_file_name), 'wb'))
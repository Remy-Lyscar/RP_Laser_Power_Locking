#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jun 28 10:09:05 2024

@author: ipiq
"""


"""
Power-locking of the blue laser 422 nm


Set ACQ = True and the parameters of the acquisition to launch data acquisition
The datapoints are collected in pandas dataframe and saved using the module pickle
One just needs to load the pickle file (.pkl) in a python script and deal with it as a pandas dataframe


The calibration is given so that one chooses the power wanted, and the voltage setpoint 
of the PID is adjusted using the calibration

"""


import time 
from pyrpl.async_utils import sleep
import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd 
import os 
from pyrpl import Pyrpl
import pickle 
import socket
import threading



# Location of the file
current_dir = os.path.dirname(os.path.abspath(__file__))

# If needed, this is the location of the PyRPL library 
# /home/ipiq/anaconda3/envs/pyrpl-env(3)/lib/python3.6/site-packages/pyrpl/



##### Type of power-locking #####

# Acquire data? 
ACQ = False # If set to True, it may be necessary to do multi-threading to deal acquisition in parallel 
            # with the connexion to the LAN to get power setpoints instructions (see below)


##### Calibration of the laser #####

# Powermeter: FieldMaster 

# See 'calibration.py' to see how the calibration was made

a = 570.2380952772035
b = 7.761904759753572

def V(P): 
    return (P-b)/a


##### RedPitaya and PyRPL #####

# Opening of a Pyrpl session to interact with RedPitaya
HOSTNAME = "192.168.1.208"
# The config file, here 'blue422nm', is specific to each laser. The changes on one config file 
# do not affect the other lasers 

monitor_server_name = "monitor_server"
p = Pyrpl('blue422nm', hostname = HOSTNAME, reloadserver = True)


# # Access the RedPitaya object in charge of communicating with the board
r = p.rp


# Reset modules 

# PID Module
pid = r.pid0
pid1 = r.pid1
pid2 = r.pid2
pid.output_direct = 'off' 
pid1.output_direct = 'off'
pid2.output_direct = 'off'

# ASG module
asg0 = r.asg0
asg1 = r.asg1
asg0.output_direct = 'off'
asg1.output_direct = 'off'



# Setup the scope 
s = r.scope 
s.input1 = 'in1'
s.input2 = 'out1'
s.trigger_source = 'immediately' 



##### Connexion to the LAN to get lock instructions #####

# This program listens to the local network, waiting for connexions and sendings of the 
# power setpoins instructions
# It acts as a server


# with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as connexion_serveur: 
#     connexion_serveur.connect((nom_hote_serveur, port_d_ecoute_serveur)) 
#     connexion_serveur.send(donnees_envoyees) 
#     donnees_recues = connexion_serveur.recv(1024) 
#     print(donnees_recues)



# listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# listen_socket.bind(())

# listen_socket.listen()





# Set up the parameters of the PID
# It may be necessary to first open a PyRPL session just in order 
# to see the current value of the photodiode voltage and to adjust
# for example the parameter 'ival', that acts as a voltage offset and can be necessary to lock to 
# setpoints which are quite far of the current value of the photodiode voltage.


pid.input = 'in1'
# pid.paused = True  # By default the session PyRPl starts with a paused PID 
pid.pause_gains = 'pid'
pid.output_direct = 'out1'  
pid.setpoint = 0.1
pid.p = 100
pid.i = 0.001
pid.d = 0
pid.ival = 0  # Usually the first thing to do is to adjust this parameter with the GUI 
pid.inputfilter = [0, 0, 0, 0]
pid.max_voltage = 1
pid.min_voltage = -1    





if ACQ: 
    
    times, signal  = [], []
    duration = 3600 # seconds
    sampling_rate = 2 # Hz, the maximum using Python seems to be around 2 kHz
    
    # Name of the file containing the dataframe of the acquired data 
    # acq_file_name  =  
    
    t0 = time.time()
    
    while time.time() - t0 < duration: 
        sleep(1/sampling_rate)
        times.append(time.time()-t0)
        signal.append(s.voltage_in1)
        
        
    fig = plt.figure()
    plt.plot(times, signal, label = 'blue laser: 422 nm')
    plt.xlabel('times (seconds)')
    plt.ylabel('Photodiode voltage (V)')
    plt.legend()
    plt.plot()
    
    
    df = pd.DataFrame({
                        'times': times, 
                        'signal': signal} )
    
    
    
    
    pickle.dump(df, open(os.path.join(current_dir, acq_file_name), 'wb'))
    
    # A pickle file can be loaded using the instruction : 
    #    <name> = pickle.load(open(<path of the .pkl file, be it absolute or relative>, "rb"))
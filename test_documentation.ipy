#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 20 10:53:19 2024

@author: ipiq
"""

import time 
from pyrpl.async_utils import sleep
import numpy as np
import matplotlib.pyplot as plt 
from pyrpl import Pyrpl



# Opening of a Pyrpl session to interact with RedPitaya
HOSTNAME = "192.168.1.208"
p = Pyrpl('test3', hostname = HOSTNAME)

# # Access the RedPitaya object in charge of communicating with the board
r = p.rp

# #see how the adc reading fluctuates over time
# times, data = [],[]
# t0 = time.time()
# n = 3000
# for i in range(n):
#     times.append(time.time()-t0)
#     data.append(r.scope.voltage_in1)
# print("Rough time to read one FPGA register: ", (time.time()-t0)/n*1e6, "?s")
# %matplotlib inline
# f, axarr = plt.subplots(1,2, sharey=True)
# axarr[0].plot(times, data, "+")
# axarr[0].set_title("ADC voltage vs time")
# axarr[1].hist(data, bins=10,normed=True, orientation="horizontal")
# axarr[1].set_title("ADC voltage histogram")


# asg = r.asg1
# s = r.scope

# # turn off asg so the scope has a chance to measure its "off-state" as well
# asg.output_direct = "off"

# # setup scope
# s.input1 = 'asg1'

# # pass asg signal through pid0 with a simple integrator - just for fun (detailed explanations for pid will follow)
# r.pid0.input = 'asg1'
# r.pid0.ival = 0 # reset the integrator to zero
# r.pid0.i = 1000 # unity gain frequency of 1000 hz
# r.pid0.p = 1.0 # proportional gain of 1.0
# r.pid0.inputfilter = [0,0,0,0] # leave input filter disabled for now

# # show pid output on channel2
# s.input2 = 'pid0'

# # trig at zero volt crossing
# s.threshold = 0

# # positive/negative slope is detected by waiting for input to
# # sweep through hysteresis around the trigger threshold in
# # the right direction
# s.hysteresis = 0.01

# # trigger on the input signal positive slope
# s.trigger_source = 'ch1_positive_edge'

# # take data symetrically around the trigger event
# s.trigger_delay = 0

# # set decimation factor to 64 -> full scope trace is 8ns * 2^14 * decimation = 8.3 ms long
# s.decimation = 64

# # launch a single (asynchronous) curve acquisition, the asynchronous
# # acquisition means that the function returns immediately, eventhough the
# # data-acquisition is still going on.
# res = s.curve_async()

# print("Before turning on asg:")
# print("Curve ready:", s.curve_ready()) # trigger should still be armed

# # turn on asg and leave enough time for the scope to record the data
# asg.setup(frequency=1e3, amplitude=0.3, waveform='halframp', trigger_source='immediately')
# sleep(0.010)

# # check that the trigger has been disarmed
# print("After turning on asg:")
# print("Curve ready:", s.curve_ready())
# print("Trigger event age [ms]:",8e-9*((
# s.current_timestamp&0xFFFFFFFFFFFFFFFF) - s.trigger_timestamp)*1000)

# # The function curve_async returns a *future* (or promise) of the curve. To
# # access the actual curve, use result()
# ch1, ch2 = res.result()

# # plot the data
# %matplotlib inline
# plt.plot(s.times*1e3, ch1)
# plt.plot(s.times*1e3, ch2, label = 'pid')
# plt.legend()
# plt.xlabel("Time [ms]")
# plt.ylabel("Voltage")


# # useful functions for scope diagnostics
# print("Curve ready:", s.curve_ready())
# print("Trigger source:",s.trigger_source)
# print("Trigger threshold [V]:",s.threshold)
# print("Averaging:",s.average)
# print("Trigger delay [s]:",s.trigger_delay)
# print("Trace duration [s]: ",s.duration)
# print("Trigger hysteresis [V]", s.hysteresis)
# print("Current scope time [cycles]:",hex(s.current_timestamp))
# print("Trigger time [cycles]:",hex(s.trigger_timestamp))
# print("Current voltage on channel 1 [V]:", r.scope.voltage_in1)
# print("First point in data buffer 1 [V]:", s.ch1_firstpoint)




# #make shortcut
# pid = r.pid0

# # set input to asg1
# pid.input = "asg1"

# # set asg to constant 0.1 Volts
# r.asg1.setup(waveform="dc", offset = 0.1)

# # set scope ch1 to pid0
# r.scope.input1 = 'pid0'

# #turn off the gains for now
# pid.p,pid.i = 0, 0

# #set integral value to zero
# pid.ival = 0

# #prepare data recording
# from time import time
# times, ivals, outputs = [], [], []

# # turn on integrator to whatever negative gain
# pid.i = -10

# # set integral value above the maximum positive voltage
# pid.ival = 1.5

# #take 1000 points - jitter of the ethernet delay will add a noise here but we dont care
# for n in range(1000):
#     times.append(time())
#     ivals.append(pid.ival)
#     outputs.append(r.scope.voltage_in1)

# #plot
# import matplotlib.pyplot as plt
# %matplotlib inline
# times = np.array(times)-min(times)
# plt.plot(times,ivals,times,outputs)
# plt.xlabel("Time [s]")
# plt.ylabel("Voltage")



#### POC: generation of a ramp and observation with GUI   #####


asg = r.asg1
asg.output_direct = 'out1'
asg.setup(waveform='ramp', frequency=10e4, amplitude = 0.5, offset = 0,
          trigger_source='immediately')





#### How to add buttons to the scope widget to scan and then lock #####


from pyrpl.gui import RedPitayaGui
from PyQt4 import QtCore, QtGui

class RedPitayaGuiCustom(RedPitayaGui):
    """
    This is the derived class containing our customizations
    """
    
    def customize_scope(self): #This function is called upon object instanciation
        """
        By overwritting this function in the child class, the user can perform custom initializations.
        """
        
        self.scope_widget.layout_custom = QtGui.QHBoxLayout()
        #Adds an horizontal layout for our extra-buttons
        self.scope_widget.button_scan = QtGui.QPushButton("Scan")
        # creates a button "Scan"
        self.scope_widget.button_lock = QtGui.QPushButton("Lock")
        # creates a button "Lock"
        self.scope_widget.label_setpoint = QtGui.QLabel("Setpoint")
        # creates a label for the setpoint spinbox
        self.scope_widget.spinbox_setpoint = QtGui.QDoubleSpinBox()
        # creates a spinbox to enter the value of the setpoint 
        self.scope_widget.spinbox_setpoint.setDecimals(4)
        # sets the desired number of decimals for the spinbox
        self.scope_widget.spinbox_setpoint.setSingleStep(0.001)
        # Change the step by which the setpoint is incremented when using the arrows
        
        self.scope_widget.layout_custom.addWidget(self.scope_widget.button_scan)
        self.scope_widget.layout_custom.addWidget(self.scope_widget.button_lock)
        self.scope_widget.layout_custom.addWidget(self.scope_widget.label_setpoint)
        self.scope_widget.layout_custom.addWidget(self.scope_widget.spinbox_setpoint)
        # Adds the buttons in the layout
        
        self.scope_widget.main_layout.addLayout(self.scope_widget.layout_custom)
        # Adds the layout at the bottom of the scope layout
        
        self.scope_widget.button_scan.clicked.connect(self.scan)
        self.scope_widget.button_lock.clicked.connect(self.lock)
        self.scope_widget.spinbox_setpoint.valueChanged.connect(self.change_setpoint)
        # connects the buttons to the desired functions
        
        
    def custom_setup(self): #This function is also called upon object instanciation
        """
        By overwritting this function in the child class, the user can perform custom initializations.
        """
        
        #setup asg1 to output the desired ramp
        self.asg1.offset = .5
        self.asg1.scale = 0.5
        self.asg1.waveform = "ramp"
        self.asg1.frequency = 100
        self.asg1.trigger_source = 'immediately'

        #setup the scope to record approximately one period
        self.scope.duration = 0.01
        self.scope.input1 = 'dac1'
        self.scope.input2 = 'dac2'
        self.scope.trigger_source = 'asg1'

        #automatically start the scope
        self.scope_widget.run_continuous()
        
    def change_setpoint(self):
        """
        Directly reflects the value of the spinbox into the pid0 setpoint
        """
        
        self.pid0.setpoint = self.scope_widget.spinbox_setpoint.value()

    def lock(self): #Called when button lock is clicked
        """
        Set up everything in "lock mode"
        """
        
        # disable button lock
        self.scope_widget.button_lock.setEnabled(False)
        # enable button scan
        self.scope_widget.button_scan.setEnabled(True)
        
        
        # shut down the asg
        self.asg1.output_direct = 'off'
        
        # set pid input/outputs
        self.pid0.input = 'adc1'
        self.pid0.output_direct = 'out2'
        
        #set pid parameters
        self.pid0.setpoint = self.scope_widget.spinbox_setpoint.value()
        self.pid0.p = 0.1
        self.pid0.i = 100
        self.pid0.ival = 0

    def scan(self): #Called when button lock is clicked
        """
        Set up everything in "scan mode"
        """
        
        # enable button lock
        self.scope_widget.button_lock.setEnabled(True)
        # enable button scan
        self.scope_widget.button_scan.setEnabled(False)
        # switch asg on
        self.asg1.output_direct = 'out2'
        
        #switch pid off
        self.pid0.output_direct = 'off'
        
# Instantiate the class RePitayaGuiCustom
r = RedPitayaGuiCustom(HOSTNAME)
# launch the gui
r.gui()


























#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 20 13:53:26 2024

@author: ipiq
"""


import time 
from pyrpl.async_utils import sleep
import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd 
import os 
# import path
from pyrpl import Pyrpl
import pickle 
# import tqdm 


# Opening of a Pyrpl session to interact with RedPitaya
HOSTNAME = "192.168.1.208"
p = Pyrpl('test3', hostname = HOSTNAME)


# # Access the RedPitaya object in charge of communicating with the board
r = p.rp



# Reset of all the modules that can be set to 'out1'

# PID Module
pid = r.pid0
pid1 = r.pid1
pid2 = r.pid2
pid.output_direct = 'off'
pid1.output_direct = 'off'
pid2.output_direct = 'off'

# ASG module
asg0 = r.asg0
asg1 = r.asg1
asg0.output_direct = 'off'
asg1.output_direct = 'off'



# Setup the scope 
s = r.scope 
s.input1 = 'in1'
s.input2 = 'out1'



# Setup the parameters of the PID 
pid.input = 'in1'
pid.output_direct = 'out1'
pid.setpoint = 0.08
pid.p = -10
pid.i = -0.01
pid.d = 0
pid.ival = 0
pid.inputfilter = [0, 0, 0, 0]
pid.max_voltage = 1
pid.min_voltage = -1


# Quand on veut arrêter le PID il suffit de passer output_direct à 'off', 
# et on peut le faire en temps réel dans le terminal de commande 



# err = input - setpoint 
# -> il faut un p négatif, et un i négatif 



times, signal  = [], []


t0 = time.time()

while time.time() - t0 < 3600: 
    sleep(0.5)
    times.append(time.time()-t0)
    signal.append(s.voltage_in1)
    
    
fig = plt.figure()
plt.plot(times, signal, label = 'locked laser')
plt.xlabel('times (seconds)')
plt.ylabel('input voltage (V)')
plt.legend()
plt.plot()


df = pd.DataFrame({
                    'times': times, 
                    'signal': signal} )


current_dir = os.path.dirname(os.path.abspath(__file__))

pickle.dump(df, open(os.path.join(current_dir, 'locked_laser_mer_26_juin.pkl'), 'wb'))




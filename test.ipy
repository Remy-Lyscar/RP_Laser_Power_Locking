#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 26 11:46:42 2024

@author: ipiq


File to make any kind of tests with PyRPL
"""

import time 
from pyrpl.async_utils import sleep
import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd 
import os 
from pyrpl import Pyrpl
import pickle 


# Location of the file
current_dir = os.path.dirname(os.path.abspath(__file__))

# If needed, this is the location of the PyRPL library 
# /home/ipiq/anaconda3/envs/pyrpl-env/lib/python3.6/site-packages/pyrpl/


##### Type of power-locking #####

# Do we have to acquire data?
ACQ = False 
# Do we want the lock to be included in a sequence, and to react to a trigger ? 
SEQ = False



##### Calibration of the laser #####





##### RedPitaya and PyRPL #####

# Opening of a Pyrpl session to interact with RedPitaya
HOSTNAME = "192.168.1.208"

p = Pyrpl('blue_422', hostname = HOSTNAME, reloadserver = True)

# # Access the RedPitaya object in charge of communicating with the board
r = p.rp


# Reset modules 

# PID Module
pid = r.pid0
pid1 = r.pid1
pid2 = r.pid2
pid.output_direct = 'off'
pid1.output_direct = 'off'
pid2.output_direct = 'off'

# ASG module
asg0 = r.asg0
asg1 = r.asg1
asg0.output_direct = 'off'
asg1.output_direct = 'off'



# Setup the scope 
s = r.scope 
s.input1 = 'in1'
s.input2 = 'out1'
s.trigger_source = 'immediately'
s.decimation = 65536
print(s.decimation)


pid.output_direct = 'out1'
pid.setpoint = 0.1

sleep(5)

pid.setpoint = 0.05

sleep(5)

pid.setpoint = 0.1

sleep(5)

pid.setpoint = 0.05


ACQ = False
if ACQ: 
    
    times, signal  = [], []
    duration = 5 # seconds
    sampling_rate = 2 # Hz
    
    # Name of the file containing the dataframe of the acquired data 
    # acq_file_name  =  'test.pkl'
    
    t0 = time.time()
    
    while time.time() - t0 < duration: 
        # sleep(1/sampling_rate)
        times.append(time.time()-t0)
        signal.append(s.voltage_in1)
        
        
    print(len(signal))
    # fig = plt.figure()
    # plt.plot(times, signal, label = 'blue laser: 422 nm')
    # plt.xlabel('times (seconds)')
    # plt.ylabel('Photodiode voltage (V)')
    # plt.legend()
    # plt.plot()
    
    
    # df = pd.DataFrame({
    #                     'times': times, 
    #                     'signal': signal} )
    
    
    
    
    # pickle.dump(df, open(os.path.join(current_dir, acq_file_name), 'wb'))











